`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    21:51:11 10/04/2017 
// Design Name: 
// Module Name:    output_pixels 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module output_pixels #(parameter WIDTH = 10,   // default width: 10 pixels
               HEIGHT = 40)(                // default height: 40 pixels 
		clk,
		rst,
		
		score1,
		tank,
		guntank,
		plane1,
		plane2,
		lastTime,
		
		//overAll, // flag for loose
		winAll, // flag for win
		
		
		hcount,
		vcount,
		final 
);

// ====================================================================================
// 										Port Declarations
// ====================================================================================
	input 		 clk;
	input 		 rst;
	//input			 overAll;
	input			 winAll;
	input	[10:0] hcount;
	input	[9:0]	 vcount;
	input [7:0]	 score1;
	input [7:0]	 tank;
	input [7:0]	 guntank;
	input [7:0] plane1;
	input [7:0] plane2;
	input [7:0] lastTime;
	output [7:0] final;

// ====================================================================================
// 								Parameters, Register, and Wires
// ====================================================================================
	reg [7:0]	 final;
	reg [7:0]	 pixels;
	reg [7:0]	 x = 180;
	reg [7:0]	 y = 245;
  
//  ===================================================================================
// 							  				Implementation
//  ===================================================================================
	
		always @(posedge clk)
		begin
			if ( rst == 1 )
				final <= 0;
		   else
				if (winAll == 0)
					pixels <= 8'b0;
				else
				begin
					if (winAll == 1)
						if (
							 score1 ||
							 ((hcount >= x && hcount < (x + 70)) && (vcount >= y && vcount < (y + WIDTH))) ||
							 ((hcount >= x && hcount < (x + 10)) && (vcount >= (y + WIDTH) && vcount < (y + WIDTH + HEIGHT))) || //upper left vertical line												|		|  |
							 ((hcount >= (x+60) && hcount < (x+70)) && (vcount >= (y+50) && vcount < (y+110))) || 																																																				//		+-----+  |
							 ((hcount >= x && hcount < (x + 60)) && (vcount >= (y + 100) && vcount < (y + 110))) || //end middle vertical line																|  |
							 ((hcount >= x && hcount < (x + WIDTH)) && (vcount >= (y + 60) && vcount < (y + 110))) || //lower left vertical line									|  |
							 ((hcount >= x && hcount < (x+60)) &&(vcount >= (y+50) && vcount < (y+60))) ||		//linea del centro vertical					 
							 
							 ((hcount >= (x+73) && hcount < (x+73+60)) && (vcount >= y && vcount <(y + WIDTH))) ||  //A
							 ((hcount >= (x+73) && hcount < (x+73+WIDTH)) && (vcount >= (y+WIDTH) && vcount < (y+110))) ||
							 ((hcount >= (x+78) && hcount < (x+73+60))&&(vcount >= (y+50) && vcount <(y+60))) ||
							 ((hcount >= (x+73+60) && hcount < (x+73+60+WIDTH))&&(vcount >= (y) && vcount < (y+110)))||
							 
							 ((hcount >= (x+146) && hcount < (x+146+60))&&(vcount >= y && vcount < (y+WIDTH))) || //M
							 ((hcount >= (x+146) && hcount < (x+146+WIDTH))&&(vcount >= y && vcount < (y+110))) ||
							 ((hcount >= (x+146+30) && hcount < (x+146+30+WIDTH))&&(vcount >= y && vcount < (y+110))) ||
							 ((hcount >= (x+146+60) && hcount < (x+146+60+WIDTH))&&(vcount >= y && vcount < (y+110))) ||
							 
							 ((hcount >=(x+219)&& hcount < (x+219+60)) && (vcount >= y && vcount < (y+WIDTH))) || //E
							 ((hcount >=(x+219+WIDTH) && hcount < (x+219+60)) && (vcount >= (y+50) && vcount < (y+50+WIDTH)))||
							 ((hcount >=(x+219+WIDTH)&& hcount < (x+219+60)) && (vcount >= (y+100) && vcount < (y+110))) ||
							 ((hcount >=(x+219)&& hcount < (x+219+WIDTH)) && (vcount >= (y+WIDTH) && vcount < (y+110))) ||
							 
							 ((hcount >= (x+309) && hcount < (x+309+60)) && (vcount >= y && vcount <(y + WIDTH))) ||  //O
							 ((hcount >= (x+309) && hcount < (x+309+WIDTH)) && (vcount >= (y+WIDTH) && vcount < (y+110))) ||
							 ((hcount >= (x+314) && hcount < (x+309+60))&&(vcount >= (y+100) && vcount <(y+110))) ||
							 ((hcount >= (x+309+60) && hcount < (x+309+60+WIDTH))&&(vcount >= (y) && vcount < (y+110))) ||
							 
							  
							 ((hcount >= (x+382) && hcount < (x+382+WIDTH)) && (vcount >= (y) && vcount < (y+110))) ||
							 ((hcount >= (x+385) && hcount < (x+382+60))&&(vcount >= (y+100) && vcount <(y+110))) ||
							 ((hcount >= (x+382+60) && hcount < (x+382+60+WIDTH))&&(vcount >= (y) && vcount < (y+110))) ||
							 
							 ((hcount >=(x+455)&& hcount < (x+455+60)) && (vcount >= y && vcount < (y+WIDTH))) || //E
							 ((hcount >=(x+455+WIDTH) && hcount < (x+455+60)) && (vcount >= (y+50) && vcount < (y+50+WIDTH)))||
							 ((hcount >=(x+455+WIDTH)&& hcount < (x+455+60)) && (vcount >= (y+100) && vcount < (y+110))) ||
							 ((hcount >=(x+455)&& hcount < (x+455+WIDTH)) && (vcount >= (y+WIDTH) && vcount < (y+110))) ||
							 
							 ((hcount >= (x+525) && hcount < (x+525+60)) && (vcount >= y && vcount <(y + WIDTH))) ||  //R
							 ((hcount >= (x+525) && hcount < (x+525+WIDTH)) && (vcount >= (y+WIDTH) && vcount < (y+110))) ||
							 ((hcount >= (x+525) && hcount < (x+525+60))&&(vcount >= (y+50) && vcount <(y+60))) ||
							 ((hcount >= (x+525+60) && hcount < (x+525+60+WIDTH))&&(vcount >= (y) && vcount < (y+60)))||
							 ((hcount >= (x+525+40) && hcount < (x+525+50))&&(vcount >= (y+60) && vcount < (y+110)))
							 
							
							)
							pixels <= 8'hF0;
						else 
							pixels <= 8'b0;
					
				end
			final <= pixels;
		end
endmodule
